"use client"

import type React from "react"
import { useState, useRef, useEffect } from "react"
import { motion, AnimatePresence, useDragControls } from "framer-motion"
import { X, Send, Bot, User, MessageCircle, Minimize2, Maximize2, RotateCcw, GripVertical } from 'lucide-react'
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { ScrollArea } from "@/components/ui/scroll-area"
import { Badge } from "@/components/ui/badge"

interface Message {
  id: string
  text: string
  sender: "user" | "bot"
  timestamp: Date
  isTyping?: boolean
}

interface QuickReply {
  id: string
  text: string
  response: string
}

const Chatbot = () => {
  const [isOpen, setIsOpen] = useState(false)
  const [isMinimized, setIsMinimized] = useState(false)
  const [position, setPosition] = useState({ x: 0, y: 0 })
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "welcome",
      text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc\n‚Ä¢ Th√¥ng tin v·ªÅ mentors\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
      sender: "bot",
      timestamp: new Date(),
    },
  ])
  const [inputMessage, setInputMessage] = useState("")
  const [isTyping, setIsTyping] = useState(false)
  const messagesEndRef = useRef<HTMLDivElement>(null)
  const inputRef = useRef<HTMLInputElement>(null)
  const dragControls = useDragControls()

  const quickReplies: QuickReply[] = [
    {
      id: "courses",
      text: "üìö Kh√≥a h·ªçc n√†o ph√π h·ª£p v·ªõi t√¥i?",
      response:
        "Tuy·ªát v·ªùi! ƒê·ªÉ t∆∞ v·∫•n kh√≥a h·ªçc ph√π h·ª£p nh·∫•t, b·∫°n c√≥ th·ªÉ cho t√¥i bi·∫øt:\n\nüéØ M·ª•c ti√™u h·ªçc t·∫≠p c·ªßa b·∫°n?\nüíº Kinh nghi·ªám hi·ªán t·∫°i?\n‚è∞ Th·ªùi gian c√≥ th·ªÉ d√†nh ƒë·ªÉ h·ªçc?\n\nHo·∫∑c b·∫°n c√≥ th·ªÉ xem danh s√°ch kh√≥a h·ªçc t·∫°i: /dao-tao",
    },
    {
      id: "mentors",
      text: "üë®‚Äçüè´ Th√¥ng tin v·ªÅ mentors",
      response:
        "MSC Center c√≥ ƒë·ªôi ng≈© mentors gi√†u kinh nghi·ªám:\n\n‚≠ê 50+ mentors chuy√™n nghi·ªáp\nüè¢ T·ª´ c√°c c√¥ng ty h√†ng ƒë·∫ßu\nüéì Kinh nghi·ªám 5-15 nƒÉm\nüí° Chuy√™n m√¥n ƒëa d·∫°ng\n\nXem chi ti·∫øt t·∫°i: /mentors\n\nB·∫°n mu·ªën t√¨m mentor theo lƒ©nh v·ª±c n√†o?",
    },
    {
      id: "support",
      text: "üîß H·ªó tr·ª£ k·ªπ thu·∫≠t",
      response:
        "T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n:\n\nüîê V·∫•n ƒë·ªÅ ƒëƒÉng nh·∫≠p\nüì± L·ªói tr√™n mobile/desktop\nüé• Kh√¥ng xem ƒë∆∞·ª£c video\nüìä Theo d√µi ti·∫øn ƒë·ªô h·ªçc\nüí≥ Thanh to√°n kh√≥a h·ªçc\n\nVui l√≤ng m√¥ t·∫£ chi ti·∫øt v·∫•n ƒë·ªÅ b·∫°n g·∫∑p ph·∫£i!",
    },
    {
      id: "roadmap",
      text: "üó∫Ô∏è L·ªô tr√¨nh h·ªçc t·∫≠p",
      response:
        "MSC Center c√≥ c√°c l·ªô tr√¨nh h·ªçc t·∫≠p:\n\nüöÄ Frontend Developer (6 th√°ng)\n‚öôÔ∏è Backend Developer (8 th√°ng)\nüì± Mobile Developer (7 th√°ng)\nü§ñ AI/ML Engineer (10 th√°ng)\nüíº Tr∆∞·ªüng ph√≤ng CNTT (4 th√°ng)\n\nB·∫°n quan t√¢m l·ªô tr√¨nh n√†o?",
    },
    {
      id: "pricing",
      text: "üí∞ H·ªçc ph√≠ v√† ∆∞u ƒë√£i",
      response:
        "Th√¥ng tin h·ªçc ph√≠ MSC Center:\n\nüíé Kh√≥a c∆° b·∫£n: 2-5 tri·ªáu VNƒê\nüî• Kh√≥a n√¢ng cao: 5-10 tri·ªáu VNƒê\nüéØ Kh√≥a chuy√™n s√¢u: 10-20 tri·ªáu VNƒê\n\nüéÅ ∆Øu ƒë√£i hi·ªán t·∫°i:\n‚Ä¢ Gi·∫£m 30% cho sinh vi√™n\n‚Ä¢ Gi·∫£m 20% khi ƒëƒÉng k√Ω s·ªõm\n‚Ä¢ H·ªçc ph√≠ 0ƒë cho 3 b√†i ƒë·∫ßu\n\nLi√™n h·ªá t∆∞ v·∫•n: (+84) 329 381 489",
    },
    {
      id: "contact",
      text: "üìû Li√™n h·ªá tr·ª±c ti·∫øp",
      response:
        "Th√¥ng tin li√™n h·ªá MSC Center:\n\nüìß Email: msc.edu.vn@gmail.com\nüìû Hotline: (+84) 329 381 489\nüè¢ ƒê·ªãa ch·ªâ: 279 Nguy·ªÖn Tri Ph∆∞∆°ng, Ph∆∞·ªùng Di√™n H·ªìng, TP.HCM\n‚è∞ Gi·ªù l√†m vi·ªác: 8:00 - 22:00\n\nüåê Website: msc.edu.vn\nüì± Facebook: /msc.edu.vn\nüíº LinkedIn: /company/msc-center",
    },
  ]

  const botResponses = {
    greeting: [
      "Xin ch√†o! T√¥i c√≥ th·ªÉ gi√∫p g√¨ cho b·∫°n? üòä",
      "Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c h·ªó tr·ª£ b·∫°n h√¥m nay! üåü",
      "Hello! T√¥i l√† MSC Assistant, s·∫µn s√†ng gi√∫p ƒë·ª° b·∫°n! ü§ñ",
    ],
    thanks: [
      "Kh√¥ng c√≥ g√¨! T√¥i lu√¥n s·∫µn s√†ng h·ªó tr·ª£ b·∫°n! üòä",
      "R·∫•t vui ƒë∆∞·ª£c gi√∫p ƒë·ª° b·∫°n! C√≤n g√¨ kh√°c kh√¥ng? üåü",
      "C·∫£m ∆°n b·∫°n! H√£y li√™n h·ªá b·∫•t c·ª© khi n√†o c·∫ßn h·ªó tr·ª£! üíô",
    ],
    default: [
      "T√¥i hi·ªÉu b·∫°n ƒëang quan t√¢m v·ªÅ v·∫•n ƒë·ªÅ n√†y. ƒê·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t, b·∫°n c√≥ th·ªÉ:\n\nüìû G·ªçi hotline: (+84) 329 381 489\nüìß Email: msc.edu.vn@gmail.com\nüí¨ Chat v·ªõi t∆∞ v·∫•n vi√™n\n\nHo·∫∑c ch·ªçn m·ªôt trong c√°c c√¢u h·ªèi ph·ªï bi·∫øn b√™n d∆∞·ªõi! üëá",
      "C·∫£m ∆°n b·∫°n ƒë√£ li√™n h·ªá! T√¥i s·∫Ω chuy·ªÉn y√™u c·∫ßu c·ªßa b·∫°n ƒë·∫øn ƒë·ªôi ng≈© chuy√™n m√¥n ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ t·ªët nh·∫•t.\n\nTrong l√∫c ch·ªù ƒë·ª£i, b·∫°n c√≥ th·ªÉ tham kh·∫£o:\nüìö Kh√≥a h·ªçc: /dao-tao\nüë®‚Äçüè´ Mentors: /mentors\nüìù Blog: /chia-se",
      "T√¥i ƒëang h·ªçc h·ªèi th√™m ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi n√†y t·ªët h∆°n! ü§ñ\n\nHi·ªán t·∫°i, b·∫°n c√≥ th·ªÉ:\n‚Ä¢ Li√™n h·ªá tr·ª±c ti·∫øp qua hotline\n‚Ä¢ G·ª≠i email chi ti·∫øt\n‚Ä¢ ƒê·∫∑t l·ªãch t∆∞ v·∫•n mi·ªÖn ph√≠\n\nTeam MSC s·∫Ω ph·∫£n h·ªìi trong 24h! ‚ö°",
    ],
  }

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: "smooth" })
  }

  useEffect(() => {
    scrollToBottom()
  }, [messages])

  const simulateTyping = () => {
    setIsTyping(true)
    setTimeout(
      () => {
        setIsTyping(false)
      },
      1000 + Math.random() * 2000,
    )
  }

  const getBotResponse = (userMessage: string): string => {
    const message = userMessage.toLowerCase()

    if (message.includes("xin ch√†o") || message.includes("hello") || message.includes("hi")) {
      return botResponses.greeting[Math.floor(Math.random() * botResponses.greeting.length)]
    }

    if (message.includes("c·∫£m ∆°n") || message.includes("thanks") || message.includes("thank you")) {
      return botResponses.thanks[Math.floor(Math.random() * botResponses.thanks.length)]
    }

    if (message.includes("kh√≥a h·ªçc") || message.includes("course")) {
      return quickReplies.find((q) => q.id === "courses")?.response || botResponses.default[0]
    }

    if (message.includes("mentor") || message.includes("gi·∫£ng vi√™n")) {
      return quickReplies.find((q) => q.id === "mentors")?.response || botResponses.default[0]
    }

    if (message.includes("l·ªói") || message.includes("error") || message.includes("bug")) {
      return quickReplies.find((q) => q.id === "support")?.response || botResponses.default[0]
    }

    if (message.includes("h·ªçc ph√≠") || message.includes("gi√°") || message.includes("price")) {
      return quickReplies.find((q) => q.id === "pricing")?.response || botResponses.default[0]
    }

    return botResponses.default[Math.floor(Math.random() * botResponses.default.length)]
  }

  const handleSendMessage = (e: React.FormEvent) => {
    e.preventDefault()
    if (!inputMessage.trim()) return

    const userMessage: Message = {
      id: Date.now().toString(),
      text: inputMessage,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    setInputMessage("")
    simulateTyping()

    setTimeout(
      () => {
        const botResponse: Message = {
          id: (Date.now() + 1).toString(),
          text: getBotResponse(inputMessage),
          sender: "bot",
          timestamp: new Date(),
        }
        setMessages((prev) => [...prev, botResponse])
      },
      1500 + Math.random() * 1500,
    )
  }

  const handleQuickReply = (reply: QuickReply) => {
    const userMessage: Message = {
      id: Date.now().toString(),
      text: reply.text,
      sender: "user",
      timestamp: new Date(),
    }

    setMessages((prev) => [...prev, userMessage])
    simulateTyping()

    setTimeout(() => {
      const botResponse: Message = {
        id: (Date.now() + 1).toString(),
        text: reply.response,
        sender: "bot",
        timestamp: new Date(),
      }
      setMessages((prev) => [...prev, botResponse])
    }, 1000)
  }

  const resetChat = () => {
    setMessages([
      {
        id: "welcome",
        text: "Xin ch√†o! T√¥i l√† MSC Assistant ü§ñ\n\nT√¥i c√≥ th·ªÉ gi√∫p b·∫°n:\n‚Ä¢ T√¨m hi·ªÉu v·ªÅ c√°c kh√≥a h·ªçc\n‚Ä¢ Th√¥ng tin v·ªÅ mentors\n‚Ä¢ H·ªó tr·ª£ k·ªπ thu·∫≠t\n‚Ä¢ T∆∞ v·∫•n l·ªô tr√¨nh h·ªçc t·∫≠p\n\nB·∫°n c·∫ßn h·ªó tr·ª£ g√¨ h√¥m nay?",
        sender: "bot",
        timestamp: new Date(),
      },
    ])
  }

  return (
    <>
      {/* Floating Chat Button */}
      <AnimatePresence>
        {!isOpen && (
          <motion.div
            initial={{ scale: 0, rotate: -180 }}
            animate={{ scale: 1, rotate: 0 }}
            exit={{ scale: 0, rotate: 180 }}
            transition={{ duration: 0.3, type: "spring", stiffness: 200 }}
            className="fixed bottom-6 right-6 z-50"
            drag
            dragControls={dragControls}
            dragMomentum={false}
            dragElastic={0.1}
            onDrag={(event, info) => {
              setPosition({ x: info.offset.x, y: info.offset.y })
            }}
            style={{ x: position.x, y: position.y }}
          >
            <Button
              onClick={() => setIsOpen(true)}
              className="w-16 h-16 rounded-full bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700 shadow-2xl hover:shadow-3xl transition-all duration-300 group relative overflow-hidden cursor-grab active:cursor-grabbing"
            >
              <motion.div
                animate={{ rotate: [0, 10, -10, 0] }}
                transition={{ duration: 2, repeat: Number.POSITIVE_INFINITY, repeatDelay: 3 }}
              >
                <MessageCircle className="h-8 w-8 text-white" />
              </motion.div>

              {/* Notification Badge */}
              <motion.div
                initial={{ scale: 0 }}
                animate={{ scale: 1 }}
                className="absolute -top-2 -right-2 w-6 h-6 bg-red-500 rounded-full flex items-center justify-center"
              >
                <span className="text-xs text-white font-bold">1</span>
              </motion.div>

              {/* Pulse Effect */}
              <div className="absolute inset-0 rounded-full bg-gradient-to-r from-blue-600 to-teal-600 animate-ping opacity-20" />
            </Button>
          </motion.div>
        )}
      </AnimatePresence>

      {/* Chat Window */}
      <AnimatePresence>
        {isOpen && (
          <motion.div
            initial={{ opacity: 0, y: 100, scale: 0.8 }}
            animate={{
              opacity: 1,
              y: 0,
              scale: 1,
              height: isMinimized ? "60px" : "600px",
            }}
            exit={{ opacity: 0, y: 100, scale: 0.8 }}
            transition={{ duration: 0.3, type: "spring", stiffness: 200 }}
            className="fixed bottom-6 right-6 z-50 w-96 max-w-[calc(100vw-2rem)] md:w-96"
            drag
            dragControls={dragControls}
            dragMomentum={false}
            dragElastic={0.1}
            onDrag={(event, info) => {
              setPosition({ x: info.offset.x, y: info.offset.y })
            }}
            style={{ x: position.x, y: position.y }}
          >
            <Card className="h-full flex flex-col shadow-2xl border-0 bg-white/95 dark:bg-gray-900/95 backdrop-blur-xl overflow-hidden">
              {/* Header */}
              <CardHeader className="bg-gradient-to-r from-blue-600 to-teal-600 text-white p-4 flex-shrink-0 cursor-grab active:cursor-grabbing">
                <div className="flex items-center justify-between">
                  <CardTitle className="text-lg flex items-center space-x-3">
                    <div className="relative">
                      <Bot className="h-6 w-6" />
                      <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-white" />
                    </div>
                    <div>
                      <div className="font-semibold">MSC Assistant</div>
                      <div className="text-xs text-blue-100">Tr·ª±c tuy·∫øn ‚Ä¢ Ph·∫£n h·ªìi nhanh</div>
                    </div>
                  </CardTitle>

                  <div className="flex items-center space-x-2">
                    <Button
                      variant="ghost"
                      size="sm"
                      onPointerDown={(e) => dragControls.start(e)}
                      className="text-white hover:bg-white/20 p-1 h-auto cursor-grab active:cursor-grabbing"
                    >
                      <GripVertical className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsMinimized(!isMinimized)}
                      className="text-white hover:bg-white/20 p-1 h-auto"
                    >
                      {isMinimized ? <Maximize2 className="h-4 w-4" /> : <Minimize2 className="h-4 w-4" />}
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={resetChat}
                      className="text-white hover:bg-white/20 p-1 h-auto"
                    >
                      <RotateCcw className="h-4 w-4" />
                    </Button>
                    <Button
                      variant="ghost"
                      size="sm"
                      onClick={() => setIsOpen(false)}
                      className="text-white hover:bg-white/20 p-1 h-auto"
                    >
                      <X className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardHeader>

              {/* Chat Content */}
              <AnimatePresence>
                {!isMinimized && (
                  <motion.div
                    initial={{ opacity: 0, height: 0 }}
                    animate={{ opacity: 1, height: "auto" }}
                    exit={{ opacity: 0, height: 0 }}
                    className="flex-1 flex flex-col min-h-0"
                  >
                    <CardContent className="flex-1 flex flex-col p-0 min-h-0">
                      {/* Messages */}
                      <ScrollArea className="flex-1 p-4">
                        <div className="space-y-4">
                          {messages.map((message) => (
                            <motion.div
                              key={message.id}
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              className={`flex ${message.sender === "user" ? "justify-end" : "justify-start"}`}
                            >
                              <div
                                className={`max-w-[85%] p-3 rounded-2xl ${
                                  message.sender === "user"
                                    ? "bg-gradient-to-r from-blue-600 to-teal-600 text-white rounded-br-md"
                                    : "bg-gray-100 dark:bg-gray-800 text-gray-900 dark:text-white rounded-bl-md"
                                }`}
                              >
                                <div className="flex items-start space-x-2">
                                  {message.sender === "bot" && (
                                    <Bot className="h-4 w-4 mt-0.5 flex-shrink-0 text-blue-600" />
                                  )}
                                  {message.sender === "user" && <User className="h-4 w-4 mt-0.5 flex-shrink-0" />}
                                  <div className="flex-1">
                                    <p className="text-sm whitespace-pre-line leading-relaxed">{message.text}</p>
                                    <div
                                      className={`text-xs mt-2 ${
                                        message.sender === "user" ? "text-blue-100" : "text-gray-500"
                                      }`}
                                    >
                                      {message.timestamp.toLocaleTimeString("vi-VN", {
                                        hour: "2-digit",
                                        minute: "2-digit",
                                      })}
                                    </div>
                                  </div>
                                </div>
                              </div>
                            </motion.div>
                          ))}

                          {/* Typing Indicator */}
                          {isTyping && (
                            <motion.div
                              initial={{ opacity: 0, y: 20 }}
                              animate={{ opacity: 1, y: 0 }}
                              className="flex justify-start"
                            >
                              <div className="bg-gray-100 dark:bg-gray-800 p-3 rounded-2xl rounded-bl-md">
                                <div className="flex items-center space-x-2">
                                  <Bot className="h-4 w-4 text-blue-600" />
                                  <div className="flex space-x-1">
                                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" />
                                    <div
                                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                      style={{ animationDelay: "0.1s" }}
                                    />
                                    <div
                                      className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"
                                      style={{ animationDelay: "0.2s" }}
                                    />
                                  </div>
                                </div>
                              </div>
                            </motion.div>
                          )}
                          <div ref={messagesEndRef} />
                        </div>
                      </ScrollArea>

                      {/* Quick Replies */}
                      <div className="p-4 border-t border-gray-200 dark:border-gray-700">
                        <div className="mb-3">
                          <div className="text-xs text-gray-500 mb-2">C√¢u h·ªèi ph·ªï bi·∫øn:</div>
                          <div className="flex flex-wrap gap-2">
                            {quickReplies.slice(0, 3).map((reply) => (
                              <Badge
                                key={reply.id}
                                variant="secondary"
                                className="cursor-pointer hover:bg-blue-100 dark:hover:bg-blue-900 transition-colors text-xs py-1 px-2"
                                onClick={() => handleQuickReply(reply)}
                              >
                                {reply.text}
                              </Badge>
                            ))}
                          </div>
                        </div>

                        {/* Input */}
                        <form onSubmit={handleSendMessage} className="flex space-x-2">
                          <Input
                            ref={inputRef}
                            value={inputMessage}
                            onChange={(e) => setInputMessage(e.target.value)}
                            placeholder="Nh·∫≠p tin nh·∫Øn..."
                            className="flex-1 rounded-full border-gray-300 focus:border-blue-500 focus:ring-blue-500"
                            disabled={isTyping}
                          />
                          <Button
                            type="submit"
                            size="sm"
                            className="px-4 rounded-full bg-gradient-to-r from-blue-600 to-teal-600 hover:from-blue-700 hover:to-teal-700"
                            disabled={isTyping || !inputMessage.trim()}
                          >
                            <Send className="h-4 w-4" />
                          </Button>
                        </form>
                      </div>
                    </CardContent>
                  </motion.div>
                )}
              </AnimatePresence>
            </Card>
          </motion.div>
        )}
      </AnimatePresence>
    </>
  )
}

export default Chatbot
